Day 1 : 

What is React?
-------------------------
React.js is a Javascript library that has solves many of the problems commonly associated with javascript.

React is a fast acting modular extension that allows you to break up large dense files into more easily manageable smaller, reusable files.

This helps make React a more scalable approach than base javascript alone and it is one of the most popular libraries being used in the world right now

React is special because it allows you to bring in elements from HTML and CSS into a js file and work with them directly together. Here is an example of a React element.

EX. const h1 = <h1>Hello world</h1>;

This may seem confusing because the left sideg looks like a javascript variable while the right side resembles an HTML element. So which type is it? The answer is neither, its what is known as a JSX element or Javascript XML. JSX elements look exactly like HTML but the big difference is its located in a Javascript file instead of a HTML file.


What is a JSX element?
-------------------------

JSX elements are treated as Javascript expressions meaning they can do anything a javascript expression can including being saved into a variable, passed to a function, stored in an object or array. Here is an example of several JSX elements being stored in an object

EX. const myFamily = {
  mom: <li>Saida</li>,
  dad: <li>Henry</li>,
  brother: <li>Dan</li>,
  sister: <li>Gloria</li>,
};


JSX is what is known as a "syntax extension" which means that web browsers can't read it because it is not valid Javascript. If a JS file contain JSX then it will have to be compiled beforehand if it wants to be used! That means that before the file reaches a web browser, a JSX compiler will have to translate any JSX into regular javascript to make it compatible.

JSX Elements can have attributes just like HTML elements can (running theme). JSX attributes follow the same syntax as HTML attributes where its a Attribute Name + An Equals Sign + A Value Wrapped in Quotes

EX. name="attributeValue" 
	OR
const test = <h1 id="SamsTest" src="image.jpg">This is Sams Tests</h1>

JSX elements can be nested inside of other JSX elements just like in HTML. If a JSX expression takes up more than one line, then you MUST wrap the multi-line JSX expression in parentheses. Nested JSX expressions can be treated the same way as non-nested JSX expressions as well. Here's an example of saving a nested JSX example as a variable

EX. const example = (
  <a href="https://www.example.com">
    <h1>
      Click me!
    </h1>
  </a>
)

There is a rule when using JSX expressions that they must have exactly one outermost element or in other words, this code will work:

const paragraphs = (
  <div id="i-am-the-outermost-element">
    <p>I am a paragraph.</p>
    <p>I, too, am a paragraph.</p>
  </div>
);


But this code will not work:

const paragraphs = (
  <p>I am a paragraph.</p> 
  <p>I, too, am a paragraph.</p>
);

The first opening tag and final closing tag must belong to the same JSX element. A simple solution to fix an expression with multiple outer elements is to wrap the expression in a <div></div>
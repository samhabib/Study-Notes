Day 1 : 

What is React?
-------------------------
React.js is a Javascript library that has solves many of the problems commonly associated with javascript.

React is a fast acting modular extension that allows you to break up large dense files into more easily manageable smaller, reusable files.

This helps make React a more scalable approach than base javascript alone and it is one of the most popular libraries being used in the world right now

React is special because it allows you to bring in elements from HTML and CSS into a js file and work with them directly together. Here is an example of a React element.

EX. const h1 = <h1>Hello world</h1>;

This may seem confusing because the left sideg looks like a javascript variable while the right side resembles an HTML element. So which type is it? The answer is neither, its what is known as a JSX element or Javascript XML. JSX elements look exactly like HTML but the big difference is its located in a Javascript file instead of a HTML file.


What is a JSX element?
-------------------------

JSX elements are treated as Javascript expressions meaning they can do anything a javascript expression can including being saved into a variable, passed to a function, stored in an object or array. Here is an example of several JSX elements being stored in an object

EX. const myFamily = {
  mom: <li>Saida</li>,
  dad: <li>Henry</li>,
  brother: <li>Dan</li>,
  sister: <li>Gloria</li>,
};


JSX is what is known as a "syntax extension" which means that web browsers can't read it because it is not valid Javascript. If a JS file contain JSX then it will have to be compiled beforehand if it wants to be used! That means that before the file reaches a web browser, a JSX compiler will have to translate any JSX into regular javascript to make it compatible.

JSX Elements can have attributes just like HTML elements can (running theme). JSX attributes follow the same syntax as HTML attributes where its a Attribute Name + An Equals Sign + A Value Wrapped in Quotes

EX. name="attributeValue" 
	OR
const test = <h1 id="SamsTest" src="image.jpg">This is Sams Tests</h1>

JSX elements can be nested inside of other JSX elements just like in HTML. If a JSX expression takes up more than one line, then you MUST wrap the multi-line JSX expression in parentheses. Nested JSX expressions can be treated the same way as non-nested JSX expressions as well. Here's an example of saving a nested JSX example as a variable

EX. const example = (
  <a href="https://www.example.com">
    <h1>
      Click me!
    </h1>
  </a>
)

There is a rule when using JSX expressions that they must have exactly one outermost element or in other words, this code will work:

const paragraphs = (
  <div id="i-am-the-outermost-element">
    <p>I am a paragraph.</p>
    <p>I, too, am a paragraph.</p>
  </div>
);


But this code will not work:

const paragraphs = (
  <p>I am a paragraph.</p> 
  <p>I, too, am a paragraph.</p>
);

The first opening tag and final closing tag must belong to the same JSX element. A simple solution to fix an expression with multiple outer elements is to wrap the expression in a <div></div>


Day 2 :

What is the DOM?
-------------------------

When a web page is loaded, the browser creates a Document Object Model of the page. The HTML DOM is constructed as a tree of Objects with the head of the tree being Document. This connects to the Root element (the <html> element) and then it branches out to all of the sub elements from the root element like the <head> and the <body> elements.


With the object model, JavaScript gets all the power it needs to create dynamic HTML:

	1. JavaScript can change all the HTML elements in the page
	2. JavaScript can change all the HTML attributes in the page
	3. JavaScript can change all the CSS styles in the page
	4. JavaScript can remove existing HTML elements and attributes
	5. JavaScript can add new HTML elements and attributes
	6. JavaScript can react to all existing HTML events in the page
	7. JavaScript can create new HTML events in the page


The DOM is a W3C (World Wide Web Consortium) standard of practice, where the DOM defines the practice for accessing documents. Using a standardized format like the DOM allows us to create programs and scripts that can dynamically access and update the content, structure, and style of a document.

The W3C DOM can be split into 3 different pieces: 

	1. Core DOM - standard model for all document types
	2. XML DOM - standard model for XML documents
	3. HTML DOM - standard model for HTML documents

So when we want to change HTML documents we focus on the HTML DOM, likewise with XML documents, etc.


What is ReactDom?
-------------------------

ReactDOM is the name of a JavaScript library that contains React-specific methods that can affect the DOM in multiple ways. We will slowly learn a bunch of the useful methods that ReactDOM contains but lets start with 1 at a time.

"ReactDOM.render()" is the most common way to render JSX. The method goes and converts a JSX expression into a corresponding tree of DOM nodes and adds that tree to the DOM, which allows for a JSX expression to appear onscreen.

When using the .render() method, the first element you pass in should be a JSX element For example,

EX. 
ReactDOM.render(<h1>Hello world</h1>, document.getElementById('app')); - Would work

ReactDOM.render(document.getElementById('app'), <h1>Hello world</h1>); - Would not work

In the .render() method, the first element is appended to whatever element is selected by the second argument. document.getElementById('app); goes and searches the document for an element with the attribute id="app" and will go and attach itself to it as a nested element. So for example if it looked like this it would become this

EX.
<main id = "app"></main>
	|
	|
	|
	V
<main id = "app">
	<h1>Render me!</h1>
</main>


The first element in a .render() call can also be a variable if that variable evaluates to a JSX expression like this :

EX.
const myList = (
  <ul>
  	<li>Eat</li>
    <li>My</li>
    <li>Shorts</li>
  </ul>
);

ReactDOM.render(myList, document.getElementById('app'));

Something special about the ReactDom.render() method is that it will only re-render if the object being passed to it has changed since the last time you called the render method so for example:

EX.
const test = <h1>Dont Change</h1>;

ReactDOM.render(test,document.getElementById('app');

ReactDOM.render(test,document.getElementById('app');

Will only render the scene once, this makes React special because its able to accomplish this by utilizing a tool called the "Virtual DOM".


What is the Virtual DOM?
-------------------------

 In React, for every DOM object there is a corresponding Virtual DOM object, which represents the DOM object as sort of a lightweight copy of it. A Virtual DOM object has all of the same properties as a real DOM object but it lacks any ability to affect any of the things on the screen. 
This makes manipulating the virtual DOM much faster because it doesn't have to change anything on the screen actually and this is useful because manipulating the regular DOM is slow.

When you edit a JSX element, every single Virtual DOM object gets updated, but since these are the lightweight versions of the DOM instead of regular DOM objects its still much more efficient than the regular way of updating the DOM. Once the Virtual DOM elements are all recalculated, they are compared with a SNAPSHOT of the Virtual DOM from before the change, and any elements that are different are marked. This process is called "Diffing". Once the Diffing is finished, React only updates the DOM objects that were marked as changed in the Virtual DOM, this is where a large amount of Reacts innovation lies.



Day 3 :

JSX Gotchas (Some)
-------------------------

While grammar in JSX is very similar to that of HTML, there are some small differences to watch for, for example in HTML its common to use "class" as the name of an attribute but since "class" is a reserved word in Javascript we have to use "className" in JSX. Any JSX attributes with the name "className" will be automatically rendered into "class" attributes at render time.

Divs rendered with the class attribute of "big" will be rendered largely in the browser.

Another issue that can trip people up when using JSX is the difference in self-closing tag usage between HTML and JSX. In HTML most elements require you to have an open tag and a closing tag like: 

EX.
<div></div> 

However some elements such as <img> <br> or <input> don't require a closing tag because they are what is known as self-closing tags. When you write self-closing tags in HTML you can however put in a closing slash if you want it is not mandatory, like this:

EX.
<img />

While it is not mandatory in HTML, it IS MANDATORY in JSX to include the slash, if you do not write the slash in JSX an error will be thrown.



Writing Javascript in JSX...... In a Javascript file
-------------------------

Sometimes, it is useful to be able to access Javascript functionality within our JSX elements. For example, say we wanted to do addition within our element like this:

EX.
ReactDOM.render(<h1>2 + 3</h1>, document.getElementById('app'));

Unfortunately if we were to render this it would only produce a large "2 + 3" instead of the calculated value of 5 that we want! How do we remedy this? Well JSX was aware of this and designated the curly bracers {} to be able to switch you to Javascript functionality so to make the previous example we would make it look like this:

EX.
ReactDOM.render(<h1>{2 + 3}</h1>, document.getElementById('app'));

Now when it renders, it will display one large "5" instead of the "2 + 3" that we dislike. The curly bracers aren't treated as JSX or as Javascript, they are used as markers that signal the beginning and end of a Javascript injection into JSX similar to the quotation marks that mark the boundaries of a string "".

We do not write the {} around the variable that stores a JSX expression, we write it in the JSX expression itself that is being stored in the variable:

EX.1 GOOD
const math = <h1>{Math.PI.toFixed(20)}</h1>;   (shows the first 20 digits of pi)

ReactDOM.render(math,document.getElementById('app'))


EX.2 BAD
const math = <h1>Math.PI.toFixed(20)</h1>;

ReactDOM.render({math},document.getElementById('app'))


You can however access a Javascript variable in a JSX element by wrapping {} curly around the variable in the JSX element.

EX.
const theBestString = 'tralalalala i am da best';

ReactDOM.render(<h1>{theBestString}</h1>, document.getElementById('app'));


Attributes can also use Javascript the same way elements do with the curly brackets but there is even more you can do. If you have an javascript object variable with a lot of properties, you can use them to set multiple different JSX attribute values easily. For Example :

const pics = {
  panda: "http://bit.ly/1Tqltv5",
  owl: "http://bit.ly/1XGtkM3",
  owlCat: "http://bit.ly/1Upbczi"
}; 

const panda = (
  <img 
    src={pics.panda} 
    alt="Lazy Panda" />
);

const owl = (
  <img 
    src={pics.owl} 
    alt="Unimpressed Owl" />
);

const owlCat = (
  <img 
    src={pics.owlCat} 
    alt="Ghastly Abomination" />
); 


OR

const sideLength = "200px";

const panda = (
  <img 
    src="images/panda.jpg" 
    alt="panda" 
    height={sideLength} 
    width={sideLength} />
); 



Event Listeners in JSX
-------------------------

JSX elements can have event listeners just like HTML elements can. To create an event listener you have to give a JSX element a special attribute like:

EX.
<img onClick={myFunction} />

Event listeners attributes names are usually some variation of "on" like "onClick" or "onMouseOver". A full list of valid event listeners (there are a lot) can be found here https://reactjs.org/docs/events.html#supported-events .

With event listener attributes, their values should be a function. The above example would only work if we established a function named "myFunction" defined elsewhere in the file. Like this:

EX.
function myFunc() {
  alert('Make myFunc the pFunc... omg that was horrible i am so sorry');
}

<img onClick={myFunc} />


Note that in HTML, event listener names are written in all lowercase, such as onclick or onmouseover. In JSX, event listener names are written in camelCase, such as onClick or onMouseOver. You can use Event Listeners for a lot of things like switch attribute values like this file that will change the photo of a picture of a cat to a picture of a dog on clicking the photo:

EX.
function makeDoggy(e) {
  e.target.setAttribute('src', 'https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-puppy.jpeg');
  e.target.setAttribute('alt', 'doggy');
}

const kitty = (
	<img
	src="https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-kitty.jpg" 
	alt="kitty" 
	onClick = {makeDoggy}/>
);

ReactDOM.render(kitty, document.getElementById('app'))








